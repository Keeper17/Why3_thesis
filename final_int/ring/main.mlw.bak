

module Base

  use export int.Int
  use export int.EuclideanDivision
  use export map.Map

  type node = int
  val constant n_nodes : int
  axiom n_nodes_bounds : 2 < n_nodes 

  let predicate validNd (n:node) = 0 <= n < n_nodes

  type state = int
  val constant k_states : int
  axiom k_states_lower_bound : n_nodes < k_states

  type world =  map node state

  predicate has_token (lS:map node state) (i:node) =
  (i = 0 /\  lS i =  lS (n_nodes-1))
  \/
  (i > 0 /\ i < n_nodes /\ lS i <> lS (i-1))


end 


module Invariant_partial  

  use export Base

  (* Quantified definition sufficient and necessary for this proof *)
  predicate atLeastOneToken (lS:map node state) (n:int) = exists k :int. 0<=k<n /\ has_token lS k

  (* Transition Semantics *)
 
  function incre (x:state) : state
  = mod (x+1) k_states

  inductive step world node world =
  | step_enbld : forall w :world, n :node.
      validNd n ->
        has_token w n ->
          step w n (set w n (if n = 0 then incre (w (n_nodes-1)) else w (n-1)))

  lemma step_preserves_states :
     forall w w' :world, k i :node. step w k w' -> i<>k -> w i = w' i


  inductive step_TR world world int =
  | base : forall w :world. step_TR w w 0
  | step : forall w w' w'' :world, k :node, steps :int.
           step_TR w w' steps -> step w' k w'' -> step_TR w w'' (steps+1)

  lemma noNegative_step_TR : forall w w' :world, steps :int.
    step_TR w w' steps -> steps >= 0


  (* with this bound proof can be completed with 30 sec timeout *)
  (* axiom n_nodes_upper_bound : n_nodes < 12 *)


  (* Inductive INVARIANT *)

  predicate inv (lS:map node state) =
    (forall i :int. validNd i -> 0 <= lS i < k_states)
    /\
    atLeastOneToken lS n_nodes


  (* Preservation [inductivness] of invariant *)

  (* bounded system  *)
  lemma inv_step_bounded :
    n_nodes < 12 -> forall w w' :world, n :node. step w n w' -> inv w -> inv w'

  (* this lemma allows for an unbounded result *) 
  let rec lemma first_last (n :int) (lS :map node state)
    requires { validNd n }
    ensures { (forall j :int. 0<j<=n -> lS j = lS (j-1)) -> lS 0 = lS n }
    variant { n }
  = if n=0 then ()
    else first_last (n-1) lS

  lemma inv_step_unbounded :
    forall w w' :world, n :node. step w n w' -> inv w -> inv w'

  lemma inv_manySteps :
    forall w w' :world, steps :int.  step_TR w w' steps -> inv w -> inv w'


end



module Invariant_Full

  use Invariant_partial

  val ghost predicate atMostOneToken (lS:map node state) (n:int)
    requires { 0 <= n <= n_nodes }
    ensures { result <-> forall i j :int. 0<=i<n -> 0<=j<n -> has_token lS i -> has_token lS j -> i=j }

  predicate inv2 (lS:map node state) =
    (forall i :int. validNd i -> 0 <= lS i < k_states)
    /\
    atLeastOneToken lS n_nodes
    /\
    atMostOneToken lS n_nodes


  lemma inv_full_step_unbounded :
    forall w w' :world, n :node. step w n w' -> inv2 w -> inv2 w'

end




module AtLeastOneUniversal_bounded

  use Base

  (* Let function: must be ghost, since it uses the has_token predicate *)
  (* recursive definition is sufficiente and necessary for this proof   *)
  
  let rec ghost predicate atLeastOneToken (lS:map node state) (n:int)
    variant { n }
  = n > 0 && (has_token lS (n-1) || atLeastOneToken lS (n-1))

  axiom n_nodes_upper_bound : n_nodes < 128

  (* In fact the existence of at least one token is a universal property! *)

  lemma atLeastOneTokenLm : forall w :world. atLeastOneToken w n_nodes

end




module AtLeastOneUniversal_unbounded

  use Base

  (* Dual definition is required for this unbounded proof *)
  
  let rec ghost predicate atLeastOneToken (lS:map node state) (n:int)
    requires { 0 <= n <= n_nodes }
    ensures { result <-> exists k :int. 0<=k<n /\ has_token lS k }
    variant { n }
  = n > 0 && (has_token lS (n-1) || atLeastOneToken lS (n-1))


  let rec lemma first_last (n :int) (lS :map node state)
    requires { validNd n }
    ensures { (forall j :int. 0<j<=n -> lS j = lS (j-1)) -> lS 0 = lS n }
    variant { n }
  = if n=0 then ()
    else first_last (n-1) lS

  (* lemma can  be proved automatically if a bound is placed on n_nodes (256 for instance)  *)

  (* lemma first_last_lm : forall n :int, lS :map node state. *)
  (*   validNd n -> *)
  (*     (forall j :int. 0<j<=n -> lS j = lS (j-1)) -> *)
  (*       lS 0 = lS n *)

  lemma atLeastOneTokenLm : forall w :world. atLeastOneToken w n_nodes

end









  (* 
   - the atLeastOneTokenLm lemma  can be proved with a bound on n_nodes (128 for instance)   
   - or alternatively by proving the lemma first_last by induction on n
   - atLeastOneToken does not hold for any n<n_nodes in general, so it cannot be proved by induction
   - atLeastOneToken cannot be proved, bounded, without first_last, if defined logically (contract only)
   - it can however be proved, bounded, with only the recursive definition
   - atLeastOneToken cannot be proved, unbounded with first_last, with only the recursive definition OR only the logic definition: both are required 
   - TODO: interesting to compare prover times for bounded proofs. CVC4 seems to perform best, other solvers struggle for bounds upper than 16; CVC4 goes up to 128 easily
  *)


  (* 
   - the inv_step lemma (inductiveness of atLeastOneToken)  can be proved with a (relatively low) bound on n_nodes (12 for instance) 
   - this bounded inductiveness proof requires the quantified definition; the recursive definition is not sufficient and not necessary
   - if the first_last lemma is present, inductiveness can still not be proved if atLeastOneToken is defined only recursively
   - with the quantified definition however, the presence of the first_last lemma allows for *unbounded* inductiveness of atLeastOneToken
   - or, of course, with a high 256 bound if first_last is proved bounded without induction
   *)   


   (* 
    So to sum up, we have four ways to prove atLeastOneToken:
    - with a bound (256) and no first_last lemma, requiring recursive definition
    - with first_last lemma (no bound), requiring both recursive and quantified definition 
    - as an inductive invariant, with a bound (12), requiring quantified definition
    - as an inductive invariant, with first_last lemma (no bound), also requiring quantified definition
    *)




  (* I'm not sure if this is interesting at all, must look at k-induction *)
  (* The first lemma corresponds to inductiveness anyway, so what's the use? *)
  (* hmmm maybe the difference is that we would consider one specific initial config *)
  (* then the lemmas would be referring to specific sets of configs *)

  (* Still not very interesting: for n_nodes < 16, inv_manySteps_bounded_3 can already not be proved *)
  (* For lower values all the lemmas below can be proved, but then also inductiveness can, so *)
  (* there is nothing to be gained *)

(*
  let function initState (n:node) : state
  = if n=n_nodes-1 then 1 else 0

  constant initWorld : world = initState

  lemma initinv : inv initWorld
 
  lemma inv_manySteps_bounded_1 :
    forall steps :int. 0 <= steps < 2 ->  forall w :world. step_TR initWorld w steps -> inv w

  lemma inv_manySteps_bounded_2 :
    forall steps :int. 0 <= steps < 3 ->  forall w :world. step_TR initWorld w steps -> inv w

  lemma inv_manySteps_bounded_3 :
    forall steps :int. 0 <= steps < 4 ->  forall w :world. step_TR initWorld w steps -> inv w

  lemma inv_manySteps_bounded_4 :
    forall steps :int. 0 <= steps < 5 ->  forall w :world. step_TR initWorld w steps -> inv w

  lemma inv_manySteps_bounded_5 :
    forall steps :int. 0 <= steps < 6 ->  forall w :world. step_TR initWorld w steps -> inv w

  lemma inv_manySteps_bounded_6 :
    forall steps :int. 0 <= steps < 7 ->  forall w :world. step_TR initWorld w steps -> inv w

  lemma inv_manySteps_bounded_7 :
    forall steps :int. 0 <= steps < 8 ->  forall w :world. step_TR initWorld w steps -> inv w

  lemma inv_manySteps_bounded_8 :
    forall steps :int. 0 <= steps < 9 ->  forall w :world. step_TR initWorld w steps -> inv w

  lemma inv_manySteps_bounded_9 :
    forall steps :int. 0 <= steps < 10 ->  forall w :world. step_TR initWorld w steps -> inv w

*)




(*

  (* This invariant is much simpler to study. It is not universal, so it can only be proved inductive *)
  (* And it is proved inductive with no need for bounds or lemmas                                     *)
  (* If defined with quantifiers                                                                      *)

  val ghost predicate atMostOneToken (lS:map node state) (n:int)
    requires { 0 <= n <= n_nodes }
    ensures { result <-> forall i j :int. 0<=i<n -> 0<=j<n -> has_token lS i -> has_token lS j -> i=j }

  predicate inv2 (lS:map node state) =
    (forall i :int. validNd i -> 0 <= lS i < k_states)
    /\
    atMostOneToken lS n_nodes



  (* Finding out if it holds after the first few steps *)
  (* Note that each lemma is necessary to prove the subsequent one *)

  lemma inv2_manySteps_bounded_1 :
    forall steps :int. 0 <= steps < 2 ->  forall w :world. step_TR initWorld w steps -> inv2 w

  lemma inv2_manySteps_bounded_2 :
    forall steps :int. 0 <= steps < 3 ->  forall w :world. step_TR initWorld w steps -> inv2 w

  lemma inv2_manySteps_bounded_3 :
    forall steps :int. 0 <= steps < 4 ->  forall w :world. step_TR initWorld w steps -> inv2 w

  lemma inv2_manySteps_bounded_4 :
    forall steps :int. 0 <= steps < 5 ->  forall w :world. step_TR initWorld w steps -> inv2 w

  lemma inv2_manySteps_bounded_5 :
    forall steps :int. 0 <= steps < 6 ->  forall w :world. step_TR initWorld w steps -> inv2 w

  lemma inv2_manySteps_bounded_6 :
    forall steps :int. 0 <= steps < 7 ->  forall w :world. step_TR initWorld w steps -> inv2 w

  lemma inv2_manySteps_bounded_7 :
    forall steps :int. 0 <= steps < 8 ->  forall w :world. step_TR initWorld w steps -> inv2 w

  lemma inv2_manySteps_bounded_8 :
    forall steps :int. 0 <= steps < 9 ->  forall w :world. step_TR initWorld w steps -> inv2 w


  (* In fact invariant is preserved by arbitrary steps *)
  lemma inv2_step :
    forall w w' :world, n :node. step w n w' -> inv2 w -> inv2 w'

*)


