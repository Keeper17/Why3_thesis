
module Steps
use export int.Int
use map.Map
use export int.EuclideanDivision
use list.Mem
use list.Append
use list.Map as Lmap

  type node = int
  val constant n_nodes : int
  let predicate validNd (n:node) = 0 <= n < n_nodes
  axiom at_least_two : 2 <= n_nodes 
  type state = int
    
  type world = map node state
  axiom state_limit: forall w:world, s:state. 0 <= w s <= 3 

  function incr  (x:state) : state = mod (x+1) 4    
  function incr2 (x:state) : state = incr (incr x) 
  function incr3 (x:state) : state = incr (incr (incr x))
  
  
  (*Auxiliar Lemmas*)  
  lemma state_lm : forall x y :state. (0<=x<=3 /\ 0<=y<=3)->
    (x = y \/ x = incr y \/ x = incr2 y \/ y =incr x)
    
  lemma state_lm_2 : forall x y :state. (0<=x<=3 /\ 0<=y<=3)->
    x = incr2 y <-> y = incr2 x
(*---------------------------------------------------------------------------------*)
(*Predicates used to check if there is a token on a node*)
  predicate has_token_L (w:map node state) (n:node) = (n > 0 /\ n <= n_nodes-1 /\ w (n-1) = incr(w n))
  predicate has_token_R (w:map node state) (n:node) = (n >= 0 /\ n < n_nodes-1 /\ w (n+1) = incr(w n))
    
  predicate has_token (w:map node state) (n:node) = has_token_L w n \/ has_token_R w n
  
  
(*Initial World, with token on node 0*)
  let function initState (n:node) : state
  = if n=0 then 1 else 2
  
  constant initWorld : world = initState
(*------------------------------------------------------------------------------------------------------------------*)
(*Auxiliar Predicates about tokens on the world*)
  let rec ghost predicate noTokens (w:map node state) (n:int)
    requires { 0 <= n <= n_nodes }
    ensures { result <-> forall k :int. 0<=k<n -> not(has_token w k) }
    variant { n }
  = n = 0 || (not(has_token w (n-1)) && noTokens w (n-1))

  let rec ghost predicate atLeastOneToken (w:map node state) (n:int)
    requires { 0 <= n <= n_nodes }
    ensures { result <-> exists k :int. 0<=k<n /\ has_token w k }
    variant { n }
  = n > 0 && (has_token w (n-1) || atLeastOneToken w (n-1))

  let rec ghost predicate atMostOneToken (w:map node state) (n:int)
    requires { 0 <= n <= n_nodes }
    ensures { result <-> forall i j :int. 0<=i<n -> 0<=j<n -> has_token w i -> has_token w j -> i=j }
    variant { n }
  = n = 0 || (has_token w (n-1) && noTokens w (n-1))
    || (not(has_token w (n-1)) && atMostOneToken w (n-1))
    
(*------------------------------------------------------------------------------------------------------------------*)    
(*Main Invariant of the System*)
  predicate inv (w:map node state) =
    (w 0 = 1 \/ w 0 = 3) /\ (w (n_nodes-1) = 0 \/ w (n_nodes-1) = 2)
    /\
    (forall n:node. has_token w n ->
      (has_token_R w n /\ not has_token_L w n)
      \/
      (has_token_L w n /\ not has_token_R w n)
    )

    /\
(*------------------------------------------------------------------------------------------------------------------*)
(*First version of invariant, the world is in a stable state, so there is at most one token at all time*)

(* atMostOneToken w n_nodes *)            
(*------------------------------------------------------------------------------------------------------------------*)
(*  
     (forall i :int. 0<i<=n_nodes-1 /\ has_token_L w i -> 
        forall k :int. (i<k<=n_nodes-1 ->
            (w[k] = w[i] \/ w[k] = incr2 w[i]) /\ not has_token w k) 
        /\ 
        (0<=k<i ->
            (w[k] = incr w[i] \/ w[k] = incr3 w[i]) /\ not has_token w k))
    /\ (*---------------------------------------------------------*)
     (forall i :int. 0<=i<n_nodes-1  /\ has_token_R w i -> 
        forall k :int. (i<k<=n_nodes-1 -> 
            (w[k] = incr w[i] \/ w[k] = incr3 w[i]) /\ not has_token w k) 
        /\ 
        (0<=k<i ->
            (w[k] = w[i] \/ w[k] = incr2 w[i]) /\ not has_token w k))
*)
(*------------------------------------------------------------------------------------------------------------------*)
(*  Second invariant, there is a token, so all values to the left of the token are either 1 or 3,
 and to the right are 2 or 0, and there is no other token
        1 1 3 1 t2 2 0 2   or   1 3 3 t1 2 0 2 2      *)
          
(                     
     (forall i :int. has_token w i -> 
        forall k :int.
          (0 <= k < i -> (w[k] = 1 \/ w[k] = 3) /\ not has_token w k)
            /\ 
          (i < k <= n_nodes-1 -> (w[k] = 2 \/ w[k] = 0) /\ not has_token w k))
)

(*------------------------------------------------------------------------------------------------------------------*)
(*Dependendo de onde vem o token, os valores so podem ou ser incr ou iguais
    1 1 1 t1 2 2 2   ou 3 3 t3 0 0 0*)

(*
     (forall i :int. has_token_L w i -> 
        forall k :int. 
          (i < k <= n_nodes-1 -> w[k] = w[i] /\ not has_token w k) 
            /\ 
         (0 <= k < i -> w[k] = incr (w[i]) /\ not has_token w k)) 
     /\ 
     (forall i :int. has_token_R w i -> 
        forall k :int. 
       (i < k <= n_nodes-1 -> w[k] = incr (w[i]) /\ not has_token w k) 
            /\ 
       (0 <= k < i -> w[k] = w[i] /\ not has_token w k)) 
*)   
(*------------------------------------------------------------------------------------------------------------------*)




(*Lemmas que limitam o valor do nodo conforme o tipo de token que tem, 
por causa dos valores das edges terem de estar corretos, e do invariante*)
  lemma val_l_stable:
    forall w:world. inv w ->
        forall n:node. has_token_L w n ->
            w n = 0 \/ w n = 2 
              
  lemma val_r_stable:
    forall w:world. inv w ->
        forall n:node. has_token_R w n ->
            w n = 1 \/ w n = 3
              
  lemma token_LR:
    forall w:world. inv w ->
      forall n:node. has_token w n ->
        (forall l:node. 0 <= l < n -> w l = 1 \/ w l = 3)
        /\
        (forall r:node. n < r <= n_nodes-1 -> w r = 2 \/ w r = 0)
      

(*Funcao que cria o novo valor do nodo num step*)
  let ghost function evolve_value (h:node) (w:map node state) : state
    requires { validNd h }
    requires { has_token w h}
    requires { inv w }
    ensures { inv (set w h result) }
  = if h = 0 || h = n_nodes-1 then incr2 (w h)
                              else incr (w h)
                              
                              
(*Set do novo valor apos o step*)          
  inductive step world node world =
    | step_enbld : forall w :world, n :node.
      validNd n ->
        has_token w n ->
          step w n (set w n (evolve_value n w))


(*Auxiliares sobre a preservacao do invariante com steps*)
  lemma indpred_step :
    forall w w' :world, n :node. step w n w' -> inv w -> inv w'

  lemma step_preserves_states :
    forall w w' :world, n i :node. step w n w' -> i<>n -> w i = w' i

  inductive step_TR world world int =
    | base : forall w :world. step_TR w w 0
    | step : forall w w' w'' :world, n :node, steps :int.
        step_TR w w' steps -> step w' n w'' -> step_TR w w'' (steps+1)

  lemma noNegative_step_TR : forall w w' :world, steps :int.
    step_TR w w' steps -> steps >= 0

  predicate reachable (w:world) = exists steps :int. step_TR initWorld w steps

  lemma indpred_manySteps :
    forall w w' :world, steps :int . step_TR w w' steps -> inv w -> inv w'

  lemma indpred_reachable :
    forall w :world. reachable w -> inv w
    
(*------------------------------------------------------------------------------------------------------------------*)
    

(*Lemma que verifica se com estas regras todos os maps tem sempre pelo menos um token*)
  lemma atLeastOne : forall w :world, n :int.  2<=n<=n_nodes ->  
    (w 0 = 1 \/ w 0 = 3)  /\ (w (n-1) = 0 \/ w (n-1) = 2)
    -> 
    atLeastOneToken w n
    
(*Goal final, todos os worlds tem um so token sempre*)
  predicate oneToken (w:world) = atMostOneToken w n_nodes /\ atLeastOneToken w n_nodes
  goal oneToken   : forall w :world. reachable w -> oneToken w  
  


end

(*------------------------------------------------------------------------------------------------------------------*)  
(*---------------------------------EXEMPLOS-------------------------------------------------*)

module Examples

  use export Steps
  
  lemma token_w1 :
    forall w:world. (w 0 = 3 /\ w 1 = 2 /\ w 2 = 2) /\ n_nodes = 3 -> has_token w 1

  lemma token_w1s :
    forall w w':world. (w 0 = 3 /\ w 1 = 2 /\ w 2 = 2) /\ n_nodes = 3 -> has_token w 1 -> step w 1 w' -> has_token w' 2
    
  (*---------------------------------------------*)
  lemma token_w2 :
    forall w:world. (w 0 = 1 /\ w 1 = 2 /\ w 2 = 2) -> has_token w 0
    
  lemma token_w2s :
    forall w w':world. (w 0 = 1 /\ w 1 = 2 /\ w 2 = 2) /\ n_nodes = 3 -> has_token w 0 -> step w 0 w' -> has_token w' 1

  (*---------------------------------------------*)
  lemma token_w3 :
    forall w:world. (w 0 = 3 /\ w 1 = 3 /\ w 2 = 3 /\ w 3 = 2) /\ n_nodes=4 -> has_token w 3
    
  lemma token_w3s :
    forall w w':world. (w 0 = 3 /\ w 1 = 3 /\ w 2 = 3 /\ w 3 = 2) /\ n_nodes=4 -> has_token w 3 -> step w 3 w' -> has_token w' 2
  (*---------------------------------------------*)
  lemma token_w4 :
    forall w:world. (w 0 = 1 /\ w 1 = 2 /\ w 2 = 1 /\ w 3 = 0) /\ n_nodes = 4 -> has_token w 3
    
  lemma token_w4s :
    forall w:world. (w 0 = 1 /\ w 1 = 2 /\ w 2 = 1 /\ w 3 = 0) /\ n_nodes = 4 -> not inv w 
    
  lemma token_w5_atleast :
    forall w :world. (w 0 = 2 /\ w 1 = 2 /\ w 2 = 1 /\ w 3 = 0) /\ n_nodes = 4 -> atLeastOneToken w 4


  lemma token_w5_atmost :
    forall w :world. (w 0 = 2 /\ w 1 = 2 /\ w 2 = 1 /\ w 3 = 0) /\ n_nodes = 4 -> not atMostOneToken w 4

  (*---------------------------------------------*)

(* ---   0<n<(n_nodes-1)   --- *)

  (*   ... x+1  Tx  x ... -> ... x+1  x+1  Tx ...   *)
  lemma prop_a : forall w w':world, n:int. 0<n<(n_nodes-1)  -> inv w
                                                            -> w (n-1) = incr(w n) /\ w (n+1) = w n   
                                                            -> has_token_L w n
                                                            -> step w n w'
                                                            -> not(has_token_L w' n) /\ has_token_L w' (n+1) 
                                                            
  (*   ... x+1  Tx  x+1 ... -> ... x+1  x+1  x+1  ...  *)
  lemma prop_b : forall w w':world, n:int. 0<n<(n_nodes-1) -> inv w
                                                           ->  w (n-1) = incr(w n) /\ w (n+1) = incr(w n)   
                                                           -> has_token_L w n /\ has_token_R w n
                                                           -> step w n w'
                                                           -> not(has_token w' n)
                                                               
  (*  ...  x+1  Tx  x+2 ... -> ... x+1  Tx+1  x+2  ...  *)
  lemma prop_c : forall w w':world, n:int. 0<n<(n_nodes-1) -> inv w
                                                           -> w (n-1) = incr(w n) /\ w (n+1) = incr2 (w n)   
                                                           -> has_token_L w n
                                                           -> step w n w'
                                                           -> has_token_R w' n
                                                             
  (*  ...  x+1  Tx  x+3  ...  -> ... x+1  x+1  x+3 ...   *)                                           
  lemma prop_d : forall w w':world, n:int. 0<n<(n_nodes-1) -> inv w 
                                                           -> w (n-1) = incr(w n) /\ w (n+1) = incr3 (w n)   
                                                           -> has_token_L w n
                                                           -> step w n w'
                                                           -> not(has_token w' n)
                                                           
  (*  ...  x  Tx  x+1 ... -> ... Tx  x+1  x+1 ...   *)
  lemma prop_e : forall w w':world, n:int. 0<n<(n_nodes-1) -> inv w 
                                                           -> w (n-1) = w n /\ w (n+1) = incr(w n)   
                                                           -> has_token_R w n
                                                           -> step w n w'
                                                           -> not(has_token_R w' n) /\ has_token_R w' (n-1)

  (*  ...  x+2  Tx  x+1 ... -> ... x+2  Tx+1  x+1 ...   *)
  lemma prop_f : forall w w':world, n:int. 0<n<(n_nodes-1) -> inv w  
                                                           -> w (n-1) = incr2 (w n) /\ w (n+1) = incr(w n)   
                                                           -> has_token_R w n
                                                           -> step w n w'
                                                           -> not(has_token_R w' n) /\ has_token_L w' n


  (*  ...  x+3  Tx  x+1 ... -> ... x+3  x+1  x+1  ...  *)
  lemma prop_g : forall w w':world, n:int. 0<n<(n_nodes-1) -> inv w
                                                           -> w (n-1) = incr3(w n) /\ w (n+1) = incr(w n)   
                                                           -> has_token_R w n
                                                           -> step w n w'
                                                           -> not(has_token w' n)
                                                           
(* ---   0<n<(n_nodes-1)   --- *)
  
  (*    Tx  x+1 ... ->  x+2  Tx+1 ...    *)
  lemma prop_h : forall w w':world, n:int. n=0   
                                           -> inv w 
                                           -> w n = incr( w (n+1)) 
                                           -> has_token_R w n
                                           -> step w n w'
                                           -> not(has_token w' n) /\ has_token_L w' (n+1)
                                                 
  (*  ...  x+1  Tx -> ... Tx+1  x+2    *)
  lemma prop_i : forall w w':world, n:int. n=(n_nodes-1) 
                                           -> inv w
                                           ->  w n = incr( w (n-1)) 
                                           -> has_token_L w n
                                           -> step w n w'
                                           -> not(has_token w' n) /\ has_token_R w' (n-1)
end