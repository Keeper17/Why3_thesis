module SelfStab_Ring

  use oneToken.OneToken       
  use int.EuclideanDivision
  
  (*System definition*)
  type state = int
  type world = { arr : map node state}
  axiom state_limit : forall w:world, s:state. 0 <= w.arr[s] <= 3
  
  (*Functions used to change the state of a node*)
  function incr (x:state) : state = mod (x+1) 4
  function incr2(x:state) : state = incr(incr x)
  function incr3(x:state) : state = incr(incr(incr x)) 

  (*Auxiliary lemmas*)
  lemma state_lm : forall x y :state. (0<=x<=3 /\ 0<=y<=3)->
    (x = y \/ x = incr y \/ x = incr2 y \/ y =incr x)
    
  lemma state_lm_2 : forall x y :state. (0<=x<=3 /\ 0<=y<=3)->
    x = incr2 y <-> y = incr2 x
    
(*---------------------------------------------------------------------------------*)
(*Predicates used to check if there is a token. Check node n on world w*)
  predicate has_token_L (w:world) (n:node) = 0 < n <=(n_nodes-1)  /\ w.arr[n-1] = incr w.arr[n]
  predicate has_token_R (w:world) (n:node) = 0 <=n < (n_nodes-1)  /\ w.arr[n+1] = incr w.arr[n]  

  predicate has_token (w:world) (n:node) = 
   has_token_L w n \/ has_token_R w n
   
(*Function that turns a concrete world into an abstract*)
  let ghost function refn (w:world) : OneToken.world
    = { token = has_token w }

(*Initial world, with token on node 0*)
  predicate initWorld_p (w:world) =
    w.arr[0] = 1 /\ forall n:node. validNd n -> w.arr[n] = 2 
    
  let ghost predicate initWorld (w:world) = initWorld_p w    
(*--------------------------------------------------------------------------------------------------------*)

(*Predicate that checks if it is possible to take a step in a specific node*)
  predicate trans_enbld (w:world) (h:node) = validNd h /\
    (w.arr[0] = 1 \/ w.arr[0] = 3) 
    /\ (w.arr[n_nodes-1] = 2 \/ w.arr[n_nodes-1] = 0)
    /\ (forall a:node. 0<=w.arr[a]<=3) /\ 
     has_token w h 
  
(*Lemma that checks if for any world there is at least one token all the time*)
  lemma atLeastOne : forall w :world, n :int.  2<=n<=n_nodes ->  
    (w.arr[0] = 1 \/ w.arr[0] = 3)  /\ (w.arr[n-1] = 0 \/ w.arr[n-1] = 2)
    -> 
    atLeastOneToken (refn w) n
(*--------------------------------------------------------------------------------------------------------*)
(*Final version of the invariant used in the system without refinement*)
  predicate complete_inv (w:world) =
    (forall i :int. has_token w i -> 
        forall k :int. 
          (i < k <= (n_nodes-1) -> (w.arr[k] = 2 \/ w.arr[k] = 0) /\ not has_token w k) 
            /\ 
         (0 <= k < i -> (w.arr[k] = 1 \/ w.arr[k] = 3) /\ not has_token w k)) 
         
         
predicate inv (w:world) =
      (w.arr[0] = 1 \/ w.arr[0] = 3) /\ (w.arr[n_nodes-1] = 0 \/ w.arr[n_nodes-1] = 2)
      /\
      forall n:node. validNd n /\ has_token w n ->
        ((has_token_R w n /\ not has_token_L w n)
        \/
        (has_token_L w n /\ not has_token_R w n))
      /\ 
      complete_inv w

(*------------------------------------------*)
(*Lemma to check that, in a stable configuration, there cannot be token from both the right and the left at the same time*)
  lemma only_one_side:
    forall w:world.  inv w ->
      forall n:node. has_token w n ->
        (has_token_R w n /\ not has_token_L w n) \/ (has_token_L w n /\ not has_token_R w n)
          
(*Lemma to check that in a stable configuration only nodes with state 0 or 2 can have token from the left*)
    lemma val_l_stable:
      forall w:world. inv w ->
          exists n:node. has_token_L w n ->
              ( w.arr[n] = 0 \/ w.arr[n] = 2 )
              
(*Lemma to check that in a stable configuration only nodes with state 1 or 3 can have token from the right*)
    lemma val_r_stable:
      forall w:world. inv w ->
          exists n:node. 0 <= n < (n_nodes-1) /\ has_token_R w n ->
              ( w.arr[n] = 1 \/ w.arr[n] = 3 ) 
              
    
(*Transition Function, given the world and the node that is going to change, ensures that any type of node does the changes needed to
the abstract world*)
  let ghost function trans (w:world) (n:node) : world
    requires { trans_enbld w n }
    ensures  { inv w -> inv result}
    ensures  { inv w -> has_token_R w 0                   -> refn result = OneToken.trans (refn w) n (n+1) }
    ensures  { inv w -> has_token_L w (n_nodes-1)         -> refn result = OneToken.trans (refn w) n (n-1) }
    ensures  { inv w -> has_token_L w n /\ n<>(n_nodes-1) -> refn w = refn result \/ refn result = OneToken.trans (refn w) n (n+1) } 
    ensures  { inv w -> has_token_R w n /\ n<>0           -> refn w = refn result \/ refn result = OneToken.trans (refn w) n (n-1) }
    ensures  { inv w -> refn result = refn w \/ OneToken.stepind (refn w) (refn result)}
  = let st = if n = 0 || n = n_nodes-1 then incr2 (w.arr[n]) else
             incr w.arr[n]
    in 
    { arr = w.arr[n<-st] }
    
  (*--------------------------------------------------------------------------------------------------------*)
  
 inductive stepind world world =
  | trans : forall w :world, n :node.
      trans_enbld w n -> stepind w (trans w n )
      
  let ghost predicate step (w1:world) (w2:world) = stepind w1 w2
        
  clone refinement.Refinement with
    type worldC=world, type worldA=OneToken.world, val refn,
    predicate invC=inv, predicate invA=OneToken.inv,
    val initWorldC=initWorld, val initWorldA=OneToken.initWorld,
    val stepC=step, val stepA=OneToken.step
       

  goal oneToken : forall w:world. reachableC w -> oneToken (refn w)



end